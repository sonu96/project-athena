# Athena DeFi Agent - Security Scanning Pipeline
name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans weekly on Sunday at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:

jobs:
  secret-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for secret scanning
    
    - name: Run TruffleHog secret scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  dependency-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        pip install safety bandit pip-audit cyclonedx-bom
    
    - name: Run Safety check
      run: |
        safety check --full-report --output text
    
    - name: Run pip-audit
      run: |
        pip-audit --requirement requirements.txt --format=json --output=pip-audit-report.json
    
    - name: Generate SBOM
      run: |
        cyclonedx-py -r --format json --output athena-agent-sbom.json
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: athena-agent-sbom.json

  code-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install bandit
      run: pip install bandit[toml]
    
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-results.json
        bandit -r src/ -f txt -o bandit-results.txt
    
    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      with:
        name: bandit-results
        path: |
          bandit-results.json
          bandit-results.txt
    
    - name: Bandit security check (fail on high severity)
      run: |
        bandit -r src/ --severity-level high --exit-zero

  container-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t athena-agent:security-scan .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'athena-agent:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  infrastructure-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Checkov IaC scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: deployment/terraform
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif
    
    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif

  license-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pip-licenses
    
    - name: Generate license report
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=plain-vertical --output-file=licenses.txt
    
    - name: Check for problematic licenses
      run: |
        # Check for licenses that may be problematic
        pip-licenses --format=json | jq -r '.[] | select(.License | test("GPL|AGPL|LGPL|Copyleft")) | .Name + " - " + .License'
    
    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: |
          licenses.json
          licenses.txt

  api-security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Scan for API keys and secrets
      run: |
        # Check for hardcoded API keys or secrets
        echo "Scanning for potential API keys..."
        grep -r -n -i "api_key\|secret\|password\|token" src/ --exclude-dir=__pycache__ || true
        
        echo "Checking for environment variable usage..."
        grep -r -n "os.getenv\|os.environ" src/ --exclude-dir=__pycache__ || true
    
    - name: Validate environment variable patterns
      run: |
        # Ensure all sensitive data uses environment variables
        python -c "
        import re
        import os
        
        patterns = [
            r'['\''\"](sk-[a-zA-Z0-9]{48})['\''\"']',  # OpenAI API keys
            r'['\''\"](claude-[a-zA-Z0-9-]+)['\''\"']',  # Anthropic keys
            r'['\''\"](xoxb-[a-zA-Z0-9-]+)['\''\"']',  # Slack tokens
        ]
        
        for root, dirs, files in os.walk('src/'):
            for file in files:
                if file.endswith('.py'):
                    filepath = os.path.join(root, file)
                    with open(filepath, 'r') as f:
                        content = f.read()
                        for pattern in patterns:
                            matches = re.findall(pattern, content)
                            if matches:
                                print(f'Potential hardcoded secret in {filepath}: {matches}')
        "

  compliance-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for required security files
      run: |
        echo "Checking for required security files..."
        
        # Check for security documentation
        if [ ! -f "SECURITY.md" ]; then
          echo "WARNING: SECURITY.md file not found"
        fi
        
        # Check for license file
        if [ ! -f "LICENSE" ] && [ ! -f "LICENSE.txt" ] && [ ! -f "LICENSE.md" ]; then
          echo "WARNING: LICENSE file not found"
        fi
        
        # Check for code of conduct
        if [ ! -f "CODE_OF_CONDUCT.md" ]; then
          echo "INFO: CODE_OF_CONDUCT.md not found (optional)"
        fi
        
        # Check for .gitignore patterns
        if grep -q "\.env" .gitignore; then
          echo "✓ .env files are ignored"
        else
          echo "WARNING: .env files may not be properly ignored"
        fi
        
        if grep -q "credentials" .gitignore; then
          echo "✓ credentials are ignored"
        else
          echo "WARNING: credentials may not be properly ignored"
        fi

  security-summary:
    runs-on: ubuntu-latest
    needs: [secret-scan, dependency-scan, code-scan, container-scan, infrastructure-scan, license-scan, api-security-scan, compliance-check]
    if: always()
    
    steps:
    - name: Security Summary
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Secret Scan | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Scan | ${{ needs.code-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Container Scan | ${{ needs.container-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Infrastructure Scan | ${{ needs.infrastructure-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| License Scan | ${{ needs.license-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| API Security Scan | ${{ needs.api-security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Compliance Check | ${{ needs.compliance-check.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Scan completed on:** $(date)" >> $GITHUB_STEP_SUMMARY